apply plugin: 'com.tencent.bugly.tinker-support'

/**
 * 基准包 根路径
 */
def bakPath = file("${buildDir}/bakApk/")
    bakPath = project.rootDir.absolutePath + "/../apkProject/GWZJ" + "/tinkerHotfix" + "/bakApk/"

/**
 * 此处填写每次构建生成的基准包目录
 * "app-0708-10-13-32/gwzj" // "app-0208-15-10-00"
 */
def baseApkDir = tinkerBaseApkDir

/**
 * 此处填写每次构建生成的基准包名称
 */
def baseApkName = tinkerBaseApkName

/**
 * 对于插件各参数的详细解析请参考
 */
tinkerSupport {

    // 开启tinker-support插件，默认值true
    enable = true

    // 指定归档目录，默认值当前module的子目录tinker
    autoBackupApkDir = "${bakPath}"

    // 是否启用覆盖tinkerPatch配置功能，默认值false
    // 开启后tinkerPatch配置不生效，即无需添加tinkerPatch
    overrideTinkerPatchConfiguration = true

    // 编译补丁包时，必需指定基线版本的apk，默认值为空
    // 如果为空，则表示不是进行补丁包的编译
    // @{link tinkerPatch.oldApk }
    // baseApk = "${bakPath}/${baseApkDir}/app-release.apk"
    baseApk = "${bakPath}/${baseApkDir}/${baseApkName}"

    // 对应tinker插件applyMapping
    baseApkProguardMapping = "${bakPath}/${baseApkDir}/app-release-mapping.txt"

    // 对应tinker插件applyResourceMapping
    baseApkResourceMapping = "${bakPath}/${baseApkDir}/app-release-R.txt"

    // 构建基准包和补丁包都要指定不同的tinkerId，并且必须保证唯一性
    //建议设置true,用户就不用再自己管理tinkerId的命名,插件会为每一次构建的base包自动生成唯一的tinkerId，默认命名规则是versionname.versioncode_时间戳
    //具体参考"https://github.com/BuglyDevTeam/Bugly-Android-Demo/wiki/Tinker-ID%E8%AF%A5%E6%80%8E%E4%B9%88%E8%AE%BE%E7%BD%AE"
    autoGenerateTinkerId = true
    // 构建基准包和补丁包都要指定不同的tinkerId，并且必须保证唯一性
    // tinkerId = "if autoGenerateTinkerId=true ,no need set here"
    // tinkerId = "base-1.0.1"
    // tinkerId = "patch-" + rootProject.versionName + ".1"


    // 构建多渠道补丁时使用
    // buildAllFlavorsDir = "${bakPath}/${baseApkDir}"

    // 是否启用加固模式，默认为false.(tinker-spport 1.0.7起支持）
     try {
         isProtectedApp = tinkerIsProtectedApp.toBoolean()
     } catch (Exception e) {
         isProtectedApp = false
     }

    // 是否开启反射Application模式
    enableProxyApplication = false

    // 是否支持新增非export的Activity（注意：设置为true才能修改AndroidManifest文件）
    supportHotplugComponent = true

}

/**
 * 一般来说,我们无需对下面的参数做任何的修改
 * 对于各参数的详细介绍请参考:
 * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97
 */
tinkerPatch {
    // oldApk ="${bakPath}/app-0706-09-15-06/gwzj/gwzj_ecsn_v3.1.3.3_91.apk"
    ignoreWarning = false
    useSign = true
    dex {
        dexMode = "jar"
        pattern = ["classes*.dex"]
        loader = []
    }
    lib {
        pattern = ["lib/*/*.so"]
    }

    res {
        pattern = ["res/*", "r/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
        ignoreChange = []
        largeModSize = 100
    }

    packageConfig {
    }
    sevenZip {
        zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
//        path = "/usr/local/bin/7za"
    }
    buildConfig {
        keepDexApply = false
        // tinkerId = "1.0.1-base"
        //applyMapping = "${bakPath}/${appName}/app-release-mapping.txt" //  可选，设置mapping文件，建议保持旧apk的proguard混淆方式
        //applyResourceMapping = "${bakPath}/${appName}/app-release-R.txt" // 可选，设置R.txt文件，通过旧apk文件保持ResId的分配
    }
}

